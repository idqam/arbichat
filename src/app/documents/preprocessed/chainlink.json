{
  "document": "chainlink",
  "chunks": [
    {
      "id": "chainlink.mdx_chunk_0",
      "content": "***\n\nid: 'chainlink'\ntitle: 'Chainlink'\ndescription: Learn how to integrate oracles into your Arbitrum dapp\nuser\\_story: As a developer, I want to understand how to use oracles in Arbitrum to get off-chain data on-chain. content\\_type: how-to\n---------------------\n\n[Chainlink](https://chain.link/) is a widely-recognized Web3 services platform that specializes in decentralized oracle networks. It lets you build Ethereum and Arbitrum dApps that connect to a variety of off-chain data feeds and APIs, including those that provide asset prices, weather data, random number generation, and more. ### Querying the price of $ARB through Chainlink\n\nHere’s an example on how to use a price feed from Chainlink to query the current price of $ARB on-chain. We’ll use an interface provided by Chainlink that can be configured with the address of the proxy that holds the information we want to request, and wrap the operation in a contract. Chainlink provides an npm package with the contracts needed to access their feeds."
    },
    {
      "id": "chainlink.mdx_chunk_1",
      "content": "We first install that package in our project:\n\n```tsx\nyarn add @chainlink/contracts\n```\n\nTo use a data feed, we retrieve the information through the `AggregatorV3Interface` and the proxy address of the feed we want to query. ```solidity\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n```\n\nIn this case, we want to obtain the current price of $ARB in $USD in Arbitrum One, so we need to know the address of the proxy that will provide that information. Chainlink maintains a list of price feed address [here](https://docs.chain.link/data-feeds/price-feeds/addresses?network=arbitrum). For $ARB/$USD, we’ll use the address `0xb2A824043730FE05F3DA2efaFa1CBbe83fa548D6`. We can now build the function to get the latest price of $ARB."
    },
    {
      "id": "chainlink.mdx_chunk_2",
      "content": "We’ll use this example contract:\n\n```solidity\ncontract ARBPriceConsumer {\n    AggregatorV3Interface internal priceFeed;\n\n    /**\n     * Network: Arbitrum One\n     * Aggregator: ARB/USD\n     * Address: 0xb2A824043730FE05F3DA2efaFa1CBbe83fa548D6\n     */\n\t\taddress constant PROXY = 0xb2A824043730FE05F3DA2efaFa1CBbe83fa548D6;\n\n    constructor() {\n        priceFeed = AggregatorV3Interface(PROXY);\n    }\n\n    /**\n     * Returns the latest price. */\n    function getLatestPrice() public view returns (int) {\n        (\n            /* uint80 roundID */,\n            int price,\n            /*uint startedAt*/,\n            /*uint timeStamp*/,\n            /*uint80 answeredInRound*/\n        ) = priceFeed.latestRoundData();\n        return price;\n    }\n}\n```\n\nYou can adapt this contract to your needs. Just remember to use the address of the asset you want to request the price for in the appropriate network, and to **deploy your contract to the same network**. Remember we have a [Quickstart](/build-decentralized-apps/01-quickstart-solidity-remix.mdx) available that goes through the process of compiling and deploying a contract."
    },
    {
      "id": "chainlink.mdx_chunk_3",
      "content": "### More examples\n\nRefer to [Chainlink’s documentation](https://docs.chain.link/) for more examples of querying price feeds plus other data feeds available."
    }
  ]
}