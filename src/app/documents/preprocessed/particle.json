{
  "document": "particle",
  "chunks": [
    {
      "id": "particle.mdx_chunk_0",
      "content": "***\n\ntitle: 'How to implement Particle Connect for AA-enabled social logins'\ndescription: \"Guide covering the process of leveraging Particle Network's flagship SDK to onboard a user into a smart account through social logins.\"\nauthor: Ethan Francis\nsme: TABASCOatw\nsidebar\\_label: 'Particle Network'\n----------------------------------\n\n:::info Community member contribution\n\nShoutout to [@TABASCOatw](https://github.com/TABASCOatw) for contributing the following [third-party document](/for-devs/third-party-docs/contribute)! :::\n\n[Particle Network](https://particle.network) enables one-click onboarding into smart accounts through its Wallet Abstraction stack, providing social logins and wallet connection kits compatible with Arbitrum. By integrating customizable Externally Owned Account (EOA) and Account Abstraction (AA) modules, Particle enables fast 2-click onboarding via social login options like Google, email, and phone, along with traditional Web3 options. This approach lets developers implement embedded wallets, bypassing the need for conventional wallet management and provides users with a seamless and tailored Web3 interaction experience, very akin to that of Web2."
    },
    {
      "id": "particle.mdx_chunk_1",
      "content": "Arbitrum was one of the first blockchains supported by Particle Network. Because of this, Particle Network has extensive support for:\n\n* Arbitrum One, through:\n  * EOA (non-AA social login)\n  * SimpleAccount\n  * Biconomy (V1 and V2)\n  * Light Account\n  * Cyber Account\n* Arbitrum Nova, through:\n  * EOA (non-AA social login)\n  * SimpleAccount\n  * Biconomy (V1 and V2)\n\nAlongside a similar degree of support for Arbitrum Sepolia. Given its modular architecture, developers have the liberty to choose which of the above smart account implementations they onboard a user into after the social login process. The user flow with Particle Network begins with social logins (using either a custom authentication or preset login methods provided by Particle Network), which leads to the generation of an EOA through MPC-TSS. This EOA is then used as a Signer for a smart account implementation that best fits the needs of the application in question (natively, this means a choice between SimpleAccount, Biconomy V1/V2, Light Account, and Cyber Account)."
    },
    {
      "id": "particle.mdx_chunk_2",
      "content": "A visualization of this process can be found below:\n\n![](https://i.imgur.com/qfEpjgz.png)\n\n***\n\nThis document outlines the high-level steps for building a demo application on Arbitrum Sepolia using the [Particle Connect SDK](https://developers.particle.network/api-reference/connect/desktop/web) — Particle's flagship onboarding SDK. The Particle Connect SDK enables unified onboarding with social and Web3 login options within a single modal. In this demo, we'll onboard users through a SimpleAccount instance of a smart account via social login and execute a gasless (sponsored) transaction. ## Getting started\n\nThis tutorial uses a [Next.js app](https://nextjs.org/docs/getting-started/installation) with TypeScript and Tailwind CSS to showcase wallet creation on Arbitrum through social logins. With the Particle Connect SDK, wallet creation, user login, and blockchain interactions are simplified into a cohesive interface. Supporting both social logins and traditional Web3 wallets. ### Dependencies\n\nYou'll need only a few dependencies to integrate Particle Connect into your Arbitrum application."
    },
    {
      "id": "particle.mdx_chunk_3",
      "content": "Particle Connect offers built-in Account Abstraction (AA) support; however, in this example, we'll install the Particle AA SDK to use an EIP-1193 providers, such as ethers. ```bash\nyarn add @particle-network/connectkit viem@^2 @particle-network/aa ethers\n```\n\n### Setting up the Particle dashboard\n\nBefore jumping into the configuration process, you'll need to go to the [Particle dashboard](https://dashboard.particle.network) to retrieve three values required for your project. When using any SDK offered by Particle Network, you'll routinely need a `projectId`, `clientKey`, and `appId`. These exist to authenticate your project and create a connection between your instance of Particle Auth and the Particle dashboard (which allows you to customize the application-embedded modals, track users, fund your Paymaster, and so on). Once you've navigated to the Particle dashboard, follow the process below:\n\n1. Create a new project through **Add New Project**. 2."
    },
    {
      "id": "particle.mdx_chunk_4",
      "content": "Click **Web** under **Your Apps** (if you intend to use an alternative platform, take a look at the [platform-specific guides on Particle's documentation](https://developers.particle.network/reference/introduction-to-api-sdk-reference))\n3. Choose a name and domain for your application (if you have yet to deploy or decide on a domain where you intend to deploy, feel free to use any filler one). 4. Copy the **Project ID**, **Client Key** and **App ID**. Given the nature of these values, it's recommended that you store them within a `.env` file with this format:\n\n```shell\nNEXT_PUBLIC_PROJECT_ID='PROJECT_ID'\nNEXT_PUBLIC_CLIENT_KEY='CLIENT_KEY'\nNEXT_PUBLIC_APP_ID='APP_ID'\nNEXT_PUBLIC_WALLETCONNECT_PROJECT_ID='WALLETCONNECT_PROJECT_ID'\n```\n\n## Configuring Particle Connect\n\nTo get started, we'll configure and initialize Particle Connect. Create a new `ConnectKit.tsx` file in your `src` directory. Here, we'll set up the `ParticleConnectKit` component, a wrapper for the configured `ConnectKitProvider` instance, which will serve as the central interface for configuration."
    },
    {
      "id": "particle.mdx_chunk_5",
      "content": "```typescript\n'use client';\n\nimport React from 'react';\nimport { ConnectKitProvider, createConfig } from '@particle-network/connectkit';\nimport { authWalletConnectors } from '@particle-network/connectkit/auth';\nimport { evmWalletConnectors } from '@particle-network/connectkit/evm';\nimport { arbitrumSepolia } from '@particle-network/connectkit/chains';\nimport { wallet, EntryPosition } from '@particle-network/connectkit/wallet';\nimport { aa } from '@particle-network/connectkit/aa';\n\nconst config = createConfig({\n  projectId: process.env.NEXT_PUBLIC_PROJECT_ID!,\n  clientKey: process.env.NEXT_PUBLIC_CLIENT_KEY!,\n  appId: process.env.NEXT_PUBLIC_APP_ID!,\n\n  walletConnectors: [\n    authWalletConnectors({}), // Social logins\n\n    // Default Web3 logins\n    evmWalletConnectors({\n      walletConnectProjectId: process.env.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID, // optional, retrieved from https://cloud.walletconnect.com\n    }),\n  ],\n\n  plugins: [\n    wallet({\n      entryPosition: EntryPosition.BR, // Positions the modal button at the bottom right on login\n      visible: true, // Determines if the wallet modal is displayed\n    }),\n    aa({\n      name: 'SIMPLE',\n      version: '2.0.0',\n    }),\n  ],\n  chains: [arbitrumSepolia],\n});\n\nexport const ParticleConnectkit = ({ children }: React.PropsWithChildren) => {\n  return <ConnectKitProvider config={config}>{children}</ConnectKitProvider>;\n};\n```\n\nThis code sets up Particle Connect with a configuration for wallet authentication and blockchain interactions on Arbitrum Sepolia."
    },
    {
      "id": "particle.mdx_chunk_6",
      "content": "It includes social logins and traditional Web3 options through WalletConnect and enables Account Abstraction (AA) with a `SimpleAccount` instance version 2.0.0. The configured `ConnectKitProvider` component then wraps the app’s content, making this configuration available. ## Integrate Particle Connect in Your App\n\nOnce configured, wrap your application with the `ParticleConnectKit` component to make the Particle Connect SDK accessible throughout the app."
    },
    {
      "id": "particle.mdx_chunk_7",
      "content": "Update the `layout.tsx` file in the `src` directory as shown below:\n\n```tsx\nimport { ParticleConnectkit } from '@/components/Connectkit';\nimport type { Metadata } from 'next';\nimport { Inter } from 'next/font/google';\nimport './globals.css';\n\nconst inter = Inter({ subsets: ['latin'] });\n\nexport const metadata: Metadata = {\n  title: 'Particle Connectkit App',\n  description: 'Generated by create next app',\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>\n        <ParticleConnectkit>{children}</ParticleConnectkit>\n      </body>\n    </html>\n  );\n}\n```\n\n## Building the Application\n\nWith your project set up, dependencies installed, and Particle Connect configured, you can start building in the `page.tsx` file. In `page.tsx`, you’ll define the core features: login flow, data visualization, transaction handling, and the UI. ### Connecting the Wallet\n\nWith `layout.tsx` configured, the next step is to add a primary **Connect Wallet** button to facilitate user login. Import `ConnectButton` from `@particle-network/connectkit` and add it to the interface."
    },
    {
      "id": "particle.mdx_chunk_8",
      "content": "After the user logs in, the `ConnectButton` component will throw a unified login modal upon clicking, an example of this modal is viewable [here](https://demo.particle.network). ```tsx\n'use client';\nimport { ConnectButton, useAccount } from '@particle-network/connectkit';\n\nconst HomePage = () => {\n  const { address, isConnected, chainId } = useAccount();\n\n  return (\n    <div className=\"flex justify-center items-center h-screen\">\n      <div className=\"text-center\">\n        <ConnectButton />\n        {isConnected && (\n          <>\n            <h2>Address: {address}</h2>\n            <h2>Chain ID: {chainId}</h2>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default HomePage;\n```\n\n### Sending Transactions with an EIP-1193 Provider\n\nParticle Connect includes AA features out of the box, but using it with the Particle AA SDK allows you to work with EIP-1193 providers, like `ethers`. This approach is especially helpful if you're already familiar with these providers or are integrating Particle Connect into an existing app. To implement this, wrap the smart account provided by Particle Connect in an instance of `ethers` to create a `customProvider`."
    },
    {
      "id": "particle.mdx_chunk_9",
      "content": "With this setup, you can use `ethers` as usual, with the smart account handling the signing of transactions in the background. ```tsx\nimport { useSmartAccount } from '@particle-network/connectkit';\nimport { AAWrapProvider, SendTransactionMode } from '@particle-network/aa';\n\nconst smartAccount = useSmartAccount();\n\n// Init custom provider with gasless transaction mode\nconst customProvider = smartAccount\n  ? new ethers.BrowserProvider(\n      new AAWrapProvider(smartAccount, SendTransactionMode.Gasless) as Eip1193Provider,\n      'any',\n    )\n  : null;\n\n/**\n * Sends a transaction using the ethers.js library. * This transaction is gasless since the customProvider is initialized as gasless\n */\nconst executeTxEthers = async () => {\n  if (!customProvider) return;\n\n  const signer = await customProvider.getSigner();\n  const tx = {\n    to: recipientAddress,\n    value: parseEther('0.01').toString(),\n  };\n\n  const txResponse = await signer.sendTransaction(tx);\n  const txReceipt = await txResponse.wait();\n  console.log(txReceipt?.hash);\n};\n```\n\nThis transaction will be gasless because it meets two key conditions:\n\n1."
    },
    {
      "id": "particle.mdx_chunk_10",
      "content": "**Gasless Mode Configuration**: By setting `SendTransactionMode.Gasless` within `AAWrapProvider`, we've specified that the transaction should be gasless and sponsored. 2. **Funding Requirements**: On a Testnet like Arbitrum Sepolia, all transactions are automatically sponsored, meaning you don't need to deposit USDT to cover transaction fees. However, on mainnets like Arbitrum One or Arbitrum Nova, the Paymaster (configurable in the [Particle dashboard](https://dashboard.particle.network)) would need sufficient funds to sponsor these transactions. This example demonstrates how to use an existing EIP-1193 provider, but you can also construct a `userOp` directly with Particle Connect. For an example, refer to the [starter repository](https://github.com/Particle-Network/connectkit-aa-usage/blob/2017262daf297624362d51f3d50cccd3b4606ef9/app/page.tsx#L117). ## Full app example\n\nWith the setup complete, Particle Connect can now be leveraged, as demonstrated in the example application below. In this example, the application creates a smart account on Arbitrum Sepolia using a social login or a Web3 login and sends a gasless transaction of 0.01 ETH via the `ethers` provider."
    },
    {
      "id": "particle.mdx_chunk_11",
      "content": "```tsx\n'use client';\nimport React, { useEffect, useState } from 'react';\n\n// Particle imports\nimport {\n  ConnectButton,\n  useAccount,\n  usePublicClient,\n  useSmartAccount,\n} from '@particle-network/connectkit';\n\n// Eip1193 and AA Provider\nimport { AAWrapProvider, SendTransactionMode } from '@particle-network/aa'; // Only needed with Eip1193 provider\nimport { ethers, type Eip1193Provider } from 'ethers';\nimport { formatEther, parseEther } from 'viem';\n\nexport default function Home() {\n  const { isConnected, chain } = useAccount();\n  const publicClient = usePublicClient();\n  const smartAccount = useSmartAccount();\n\n  const [userAddress, setUserAddress] = useState<string>('');\n  const [balance, setBalance] = useState<string | null>(null);\n  const [recipientAddress, setRecipientAddress] = useState<string>('');\n  const [transactionHash, setTransactionHash] = useState<string | null>(null);\n\n  // Init custom provider with gasless transaction mode\n  const customProvider = smartAccount\n    ?"
    },
    {
      "id": "particle.mdx_chunk_12",
      "content": "new ethers.BrowserProvider(\n        new AAWrapProvider(smartAccount, SendTransactionMode.Gasless) as Eip1193Provider,\n        'any',\n      )\n    : null;\n\n  /**\n   * Fetches the balance of a given address. * @param {string} address - The address to fetch the balance for. */\n  const fetchBalance = async (address: string) => {\n    try {\n      const balanceResponse = await publicClient?.getBalance({\n        address: address as `0x${string}`,\n      });\n      if (balanceResponse) {\n        const balanceInEther = formatEther(balanceResponse).toString();\n        setBalance(balanceInEther);\n      } else {\n        setBalance('0.0');\n      }\n    } catch (error) {\n      console.error('Error fetching balance:', error);\n      setBalance('0.0');\n    }\n  };\n\n  /**\n   * Loads the user's account data, including address and balance."
    },
    {
      "id": "particle.mdx_chunk_13",
      "content": "*/\n  useEffect(() => {\n    const loadAccountData = async () => {\n      if (isConnected && smartAccount) {\n        try {\n          const address = await smartAccount.getAddress();\n          setUserAddress(address);\n          await fetchBalance(address);\n        } catch (error) {\n          console.error('Error loading account data:', error);\n        }\n      }\n    };\n    loadAccountData();\n  }, [isConnected, smartAccount]);\n\n  /**\n   * Sends a transaction using the ethers.js library."
    },
    {
      "id": "particle.mdx_chunk_14",
      "content": "* This transaction is gasless since the customProvider is initialized as gasless\n   */\n  const executeTxEthers = async () => {\n    if (!customProvider) return;\n\n    const signer = await customProvider.getSigner();\n    try {\n      const tx = {\n        to: recipientAddress,\n        value: parseEther('0.01').toString(),\n      };\n\n      const txResponse = await signer.sendTransaction(tx);\n      const txReceipt = await txResponse.wait();\n\n      setTransactionHash(txReceipt?.hash || null);\n    } catch (error) {\n      console.error('Failed to send transaction using ethers.js:', error);\n    }\n  };\n\n  return (\n    <div className=\"container min-h-screen flex flex-col justify-center items-center mx-auto gap-4 px-4 md:px-8\">\n      <div className=\"w-full flex justify-center mt-4\">\n        <ConnectButton label=\"Click to login\" />\n      </div>\n      {isConnected && (\n        <>\n          <div className=\"border border-purple-500 p-6 rounded-lg w-full\">\n            <h2 className=\"text-lg font-semibold mb-2 text-white\">\n              Address: <code>{userAddress || 'Loading...'}</code>\n            </h2>\n            <h2 className=\"text-lg font-semibold mb-2 text-white\">\n              Balance: {balance || 'Loading...'} {chain?.nativeCurrency.symbol}\n            </h2>\n            <input\n              type=\"text\"\n              placeholder=\"Recipient Address\"\n              value={recipientAddress}\n              onChange={(e) => setRecipientAddress(e.target.value)}\n              className=\"mt-4 p-3 w-full rounded border border-gray-700 bg-gray-900 text-white focus:outline-none\"\n            />\n            <button\n              className=\"bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded mt-4\"\n              onClick={executeTxEthers}\n              disabled={!recipientAddress}\n            >\n              Send 0.001 {chain?.nativeCurrency.name}\n            </button>\n            {transactionHash && (\n              <p className=\"text-green-500 mt-4\">Transaction Hash: {transactionHash}</p>\n            )}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n```\n\n### Available Particle Connect Hooks\n\nThis example illustrates a basic use of Particle Connect."
    },
    {
      "id": "particle.mdx_chunk_15",
      "content": "For a complete list of available hooks, refer to the [Particle Connect documentation](https://developers.particle.network/api-reference/connect/desktop/web#key-react-hooks-for-particle-connect). ## Conclusion\n\nBuilding an application on Arbitrum that takes advantage of social logins and smart accounts simultaneously only takes a few lines of code, and is even more succinct if you're already using Ethers, Web3.js, or any other standard library that supports EIP-1193 providers. To view the complete demo application leveraging the code snippets covered throughout this document, take a look at the [GitHub repository](https://github.com/Particle-Network/connect-arbitrum-tutorial). Additionally, to learn more about Particle Network, explore the following resources:\n\n* Website: https://particle.network\n* Blog: https://blog.particle.network\n* Documentation: https://developers.particle.network"
    }
  ]
}