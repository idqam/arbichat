{
  "document": "thegraph",
  "chunks": [
    {
      "id": "thegraph.mdx_chunk_0",
      "content": "# The Graph\n\nGetting historical data on a smart contract can be frustrating when building a dApp. [The Graph](https://thegraph.com/) provides an easy way to query smart contract data through APIs known as subgraphs, which utilize `GraphQL`. The Graph's infrastructure relies on a decentralized network of indexers, enabling your dApp to become truly decentralized. ## Quick start\n\nThese subgraphs only take a few minutes to set up and get running. To get started, follow these three steps:\n\n1. [Initialize your subgraph project](#1-initialize-your-subgraph-project)\n2. [Deploy & publish](#2-deploy--publish)\n3. [Query from your dApp](#sample-query)\n\nPricing: **All developers receive 100K free monthly queries on the decentralized network**. After these free queries, you only pay based on usage at $4 for every 100K queries. Here's a step by step walkthrough:\n\n## 1. Initialize your subgraph project\n\n### Create a subgraph on Subgraph Studio‚Å†\n\nGo to the [Subgraph Studio](https://thegraph.com/studio/) and connect your wallet. Once your wallet is connected, you can begin by clicking \"Create a Subgraph\". Please choose a good name for the subgraph: this name can't be edited later."
    },
    {
      "id": "thegraph.mdx_chunk_1",
      "content": "It is recommended to use Title Case: \"Subgraph Name Chain Name.\"\n\n![Create a Subgraph](https://lh7-us.googleusercontent.com/docsz/AD_4nXf8OTdwMxlKQGKzIF_kYR7NPKeh9TmWnZBYxb7ft_YbdOdx_VVtbp6PslN7N1KGUzNpIDCmaXppdrllM1cw_J4L8Na03BXOWzJTK1POCve0nkRjQYgWJ60QHAdtQ4Niy83SMM8m0F0f-N-AJj4PDqDPlA5M?key=fnI6SyFgXU9SZRNX5C5vPQ)\n\nYou will then land on your subgraph's page."
    },
    {
      "id": "thegraph.mdx_chunk_2",
      "content": "All the CLI commands you need will be visible on the right side of the page:\n\n![CLI commands](https://lh7-us.googleusercontent.com/docsz/AD_4nXe3YvCxiOH_LupSWe8zh9AmP-VrV4PlOq3f7Ix6hNlBUYcANUFuLuVIWR74OGiBs0nrugTyT0v3o6RPmTsgHONdv_ZJNWtcDWEkRntXPHlQGFcqmEBa-D6j4aoIPzUKYdOJMVUPu8O3fwjdZ4IaXXZoTzY?key=fnI6SyFgXU9SZRNX5C5vPQ)\n\n### Install the Graph CLI‚Å†\n\nOn your local machine, run the following:\n\n```shell\nnpm install -g @graphprotocol/graph-cli\n```\n\n### Initialize your Subgraph‚Å†\n\nYou can copy this directly from your subgraph page to include your specific subgraph slug:\n\n```shell\ngraph init --studio <SUBGRAPH_SLUG>\n```\n\nYou'll be prompted to provide some info on your subgraph like this:\n\n![cli sample](https://lh7-us.googleusercontent.com/docsz/AD_4nXdTAUsUb5vbs3GtCrhKhuXM1xYoqqooYTxw6lfJfYtLJNP8GKVOhTPmjxlM1b6Qpx-pXNVOzRuc8BL12wZXqy4MIj8ja0tp15znfuJD_Mg84SSNj3JpQ4d31lNTxPYnpba4UOzZx8pmgOIsbI7vCz70v9gC?key=fnI6SyFgXU9SZRNX5C5vPQ)\n\nSimply have your contract verified on the block explorer, and the CLI will automatically obtain the ABI and set up your subgraph. The default settings will generate an entity for each event. ## 2."
    },
    {
      "id": "thegraph.mdx_chunk_3",
      "content": "Deploy & publish\n\n### Deploy to Subgraph Studio‚Å†\n\nFirst, run these commands in your terminal\n\n```shell\ngraph codegen\ngraph build\n```\n\nThen, invoke these commands to authenticate and deploy your subgraph. You can copy these commands directly from your subgraph's page in Studio to include your specific deploy key and subgraph slug:\n\n```shell\ngraph auth --studio <DEPLOY_KEY>\ngraph deploy --studio <SUBGRAPH_SLUG>\n```\n\nYou will be asked for a version label. You can enter something like `V0.0.1`, but you're free to choose the format. ### Test your subgraph‚Å†\n\nYou can test your subgraph by making a sample query in the playground section. The Details tab will show you an API endpoint. You can use that endpoint to test from your dApp. ![Playground](https://lh7-us.googleusercontent.com/docsz/AD_4nXf3afwSins8_eO7BceGPN79VvwolDxmFNUnkPk0zAJCaUA-3-UAAjVvrMzwr7q9vNYWdrEUNgm2De2VfQpWauiT87RkFc-cVfoPSsQbYSgsmwhyY1-tpPdv2J1H4JAMq70nfWBhb8PszZBFjsbDAaJ5eto?key=fnI6SyFgXU9SZRNX5C5vPQ)\n\n### Publish your subgraph to The Graph's decentralized network\n\nOnce your subgraph is ready for production, you can publish it to the decentralized network."
    },
    {
      "id": "thegraph.mdx_chunk_4",
      "content": "On your subgraph's page in Subgraph Studio, click on the Publish button:\n\n![publish button](https://edgeandnode.notion.site/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2Fa7d6afae-8784-4b15-a90e-ee8f6ee007ba%2F2f9c4526-123d-4164-8ea8-39959c8babbf%2FUntitled.png?table=block\\&id=37005371-76b4-4780-b044-040a570e3af6\\&spaceId=a7d6afae-8784-4b15-a90e-ee8f6ee007ba\\&width=1420\\&userId=\\&cache=v2)\n\nBefore you can query your subgraph, Indexers need to begin serving queries on it. In order to streamline this process, you can curate your own subgraph using `$GRT`. When publishing, you'll see the option to curate your subgraph. As of May 2024, it is recommended that you curate your own subgraph with at least 3,000 `$GRT` to ensure that it is indexed and available for querying as soon as possible. ![Publish screen](https://lh7-us.googleusercontent.com/docsz/AD_4nXerUr-IgWjwBZvp9Idvz5hTq8AFB0n_VlXCzyDtUxKaCTANT4gkk-2O77oW-a0ZWOh3hnqQsY7zcSaLeCQin9XU1NTX1RVYOLFX9MuVxBEqcMryqgnGQKx-MbDnOWKuMoLBhgyVWQereg3cdWtCPcTQKFU?key=fnI6SyFgXU9SZRNX5C5vPQ)\n\n## 3. Query your Subgraph\n\nCongratulations! You can now query your subgraph on the decentralized network!"
    },
    {
      "id": "thegraph.mdx_chunk_5",
      "content": "You can start querying any subgraph on the decentralized network by passing a `GraphQL` query into the subgraph's query URL, which can be found at the top of its Explorer page. Here's an example from the [CryptoPunks Ethereum subgraph](https://thegraph.com/explorer/subgraphs/HdVdERFUe8h61vm2fDyycHgxjsde5PbB832NHgJfZNqK) by Messari:\n\n![Query URL](https://lh7-us.googleusercontent.com/docsz/AD_4nXebivsPOUjPHAa3UVtvxoYTFXaGBao9pQOAJvFK0S7Uv0scfL6TcTVjmNCzT4DgsIloAQyrPTCqHjFPtmjyrzoKkfSeV28FjS32F9-aJJm0ILAHey2gqMr7Seu4IqPz2d__QotsWG3OKv2dEghiD74eypzs?key=fnI6SyFgXU9SZRNX5C5vPQ)\n\nThe query URL for this subgraph is:\n\n```shell\nhttps://gateway-arbitrum.network.thegraph.com/api/**[api-key]**/subgraphs/id/HdVdERFUe8h61vm2fDyycHgxjsde5PbB832NHgJfZNqK\n```\n\nNow, you simply need to¬† fill in your own API Key to start sending `GraphQL` queries to this endpoint."
    },
    {
      "id": "thegraph.mdx_chunk_6",
      "content": "### Getting your own API key\n\n![API keys](https://lh7-us.googleusercontent.com/docsz/AD_4nXdz7H8hSRf2XqrU0jN3p3KbmuptHvQJbhRHOJh67nBfwh8RVnhTsCFDGA_JQUFizyMn7psQO0Vgk6Vy7cKYH47OyTq5PqycB0xxLyF4kSPsT7hYdMv2MEzAo433sJT6VlQbUAzgPnSxKI9a5Tn3ShSzaxI?key=fnI6SyFgXU9SZRNX5C5vPQ)\n\nIn Subgraph Studio, you'll see the \"API Keys\" menu at the top of the page. Here, you can create API Keys. ## Appendix\n\n### Sample query\n\nThis query shows the most expensive CryptoPunks sold. ```graphql\n{\n  trades(orderBy: priceETH, orderDirection: desc) {\n    priceETH\n    tokenId\n  }\n}\n```\n\nPassing this into the query URL returns this result:\n\n```graphql\n{\n  \"data\": {\n    \"trades\": [\n      {\n        \"priceETH\": \"124457.067524886018255505\",\n        \"tokenId\": \"9998\"\n      },\n      {\n        \"priceETH\": \"8000\",\n        \"tokenId\": \"5822\"\n      },\n//      ... ```\n\nüí° Trivia: Looking at the top sales on [CryptoPunks website](https://cryptopunks.app/cryptopunks/topsales) it looks like the top sale is Punk #5822, not #9998. Why? Because they censored the flash-loan sale that happened."
    },
    {
      "id": "thegraph.mdx_chunk_7",
      "content": "### Sample code\n\n```js\nconst axios = require('axios');\n\nconst graphqlQuery = `{\n  trades(orderBy: priceETH, orderDirection: desc) {\n    priceETH\n    tokenId\n  }\n}`;\nconst queryUrl =\n  'https://gateway-arbitrum.network.thegraph.com/api/[api-key]/subgraphs/id/HdVdERFUe8h61vm2fDyycHgxjsde5PbB832NHgJfZNqK';\n\nconst graphQLRequest = {\n  method: 'post',\n  url: queryUrl,\n  data: {\n    query: graphqlQuery,\n  },\n};\n\n// Send the `GraphQL` query\naxios(graphQLRequest)\n  .then((response) => {\n    // Handle the response here\n    const data = response.data.data;\n    console.log(data);\n  })\n  .catch((error) => {\n    // Handle any errors\n    console.error(error);\n  });\n```\n\n### Additional resources:\n\n* To explore all the ways you can optimize & customize your subgraph for better performance, read more about [creating a subgraph here](https://thegraph.com/docs/en/developing/creating-a-subgraph/). * You can find more information in our article about [querying data from your subgraph](https://thegraph.com/docs/en/querying/querying-the-graph/)."
    }
  ]
}