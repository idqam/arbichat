{
  "document": "trellor",
  "chunks": [
    {
      "id": "trellor.mdx_chunk_0",
      "content": "***\n\nid: 'trellor'\ntitle: 'Trellor'\ndescription: Learn how to integrate oracles into your Arbitrum dapp\nuser\\_story: As a developer, I want to understand how to use oracles in Arbitrum to get off-chain data on-chain. sidebar\\_label: 'Trellor'\ncontent\\_type: how-to\n---------------------\n\n[Tellor](https://tellor.io/) is a decentralized oracle network that incentivizes an open, permissionless network of data reporting and validation, ensuring that any verifiable data can be brought on-chain. It supports basic spot prices, sophisticated pricing specs (TWAP/VWAP), Snapshot Vote Results, and custom data needs. ### Querying the price of $ETH through Tellor\n\nHere’s an example of how to use a Tellor data feed to query the current price of $ETH on-chain. The way it works is that a query is crafted asking for the price of one currency against another and sent to the oracle contract. If the information for that query is available, it will be returned. Oracle contracts can be found on the [Contracts Reference](https://docs.tellor.io/tellor/the-basics/contracts-reference) page. Tellor provides an npm package with the contracts needed to query the contract."
    },
    {
      "id": "trellor.mdx_chunk_1",
      "content": "We first install that package in our project:\n\n```bash\nnpm install usingtellor\n```\n\nOur function will just wrap the call to the Oracle contract with the query we are interested in. In this case, we want to obtain the “SpotPrice” of “eth” against “usd”. We will request this information to the Arbitrum oracle contract `0xD9157453E2668B2fc45b7A803D3FEF3642430cC0`. We’ll use this example contract:\n\n```solidity\ncontract ARBPriceConsumer is UsingTellor {\n    /**\n     * Network: Arbitrum One\n     * Aggregator: ARB/USD\n     * Address: 0xD9157453E2668B2fc45b7A803D3FEF3642430cC0\n     */\n    constructor(address payable _tellorAddress) UsingTellor(_tellorAddress)\n    {}\n\n    /**\n     * Returns the latest price."
    },
    {
      "id": "trellor.mdx_chunk_2",
      "content": "*/\n    function getLatestPrice() public view returns (uint256) {\n        bytes memory _queryData = abi.encode(\"SpotPrice\", abi.encode(\"eth\", \"usd\"));\n        bytes32 _queryId = keccak256(_queryData);\n\n        (bytes memory _value, uint256 _timestampRetrieved) =\n            getDataBefore(_queryId, block.timestamp - 20 minutes);\n        if (_timestampRetrieved == 0) return 0;\n        require(block.timestamp - _timestampRetrieved < 24 hours);\n        return abi.decode(_value, (uint256));\n    }\n}\n```\n\nYou can adapt this contract to your needs. Just remember to use the ticker of the assets you want to request the price for and to **deploy your contract to the appropriate network, with the address of the Oracle contract in that network**. Remember, we have a [Quickstart](/build-decentralized-apps/01-quickstart-solidity-remix.mdx) available that goes through the process of compiling and deploying a contract. ### See also\n\n* [Tellor’s documentation](https://docs.tellor.io/) demonstrates how to query price feeds and other data feeds."
    }
  ]
}