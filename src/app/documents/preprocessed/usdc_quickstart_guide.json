{
  "document": "usdc_quickstart_guide",
  "chunks": [
    {
      "id": "usdc_quickstart_guide.mdx_chunk_0",
      "content": "***\n\ntitle: 'USDC quick start guide'\ndescription: 'Learn how to integrate USDC into your application using the Arbitrum network.'\nauthor: circle-cooper\nsme: circle-cooper\n------------------\n\nUSDC provides the ability to transfer dollars over the Arbitrum network using a smart contract. The smart contract enables users to send, receive, and store dollars on-chain with a wallet. This guide will walk you through using the [viem](https://viem.sh/) framework to build a simple app that enables a user to connect their wallet and interact with the blockchain by sending a USDC transaction from their address. ## Prerequisites\n\nBefore you start building the sample app to perform a USDC transfer, ensure you meet the following prerequisites:\n\n1. **Node.js and npm**: Ensure that you have Node.js and npm installed on your machine. You can download and install Node.js from [nodejs.org](https://nodejs.org). npm comes with Node.js. 2. [**MetaMask**](https://metamask.io/): Install the MetaMask browser extension and set up your wallet. Ensure that your wallet is funded with:\n\n   * Some native gas tokens (e.g., ETH on the Sepolia network) to cover transaction fees. * USDC tokens for the transfer."
    },
    {
      "id": "usdc_quickstart_guide.mdx_chunk_1",
      "content": "([USDC Testnet Faucet](https://faucet.circle.com/))\n\n3. **Project Setup**: Create a new project directory and initialize it with npm:\n\n```shell\nmkdir usdc-transfer-app\ncd usdc-transfer-app\nnpm init -y\n```\n\n4. **Dependencies**: Install the required dependencies using the following command:\n\n```shell\n   npm install react@^18.2.0 react-dom@^18.2.0 @types/react@^18.0.27 @types/react-dom@^18.0.10 @vitejs/plugin-react@^3.1.0 typescript@^5.0.3 vite@^4.4.5\n```\n\nThis will set up your development environment with the necessary libraries and tools for building a React application with TypeScript and Vite. ## Installation\n\nTo install viem run the following command. ```shell\nnpm i viem\n```\n\n## Setup public client\n\nThe public client is used to interact with your desired blockchain network. ```javascript\nimport { http, createPublicClient } from 'viem';\nimport { arbitrumSepolia } from 'viem/chains';\n\nconst publicClient = createPublicClient({\n  chain: arbitrumSepolia,\n  transport: http(),\n});\n```\n\n## Setup wallet client\n\nThe wallet client is used to interact with Arbitrum accounts to retrieve accounts, execute transactions, and sign messages."
    },
    {
      "id": "usdc_quickstart_guide.mdx_chunk_2",
      "content": "```javascript\nimport { createWalletClient } from 'viem';\nimport { arbitrumSepolia } from 'viem/chains';\n\nconst walletClient = createWalletClient({\n  chain: arbitrumSepolia,\n  transport: custom(window.ethereum!),\n});\n```\n\n## Define USDC contract details\n\nDefine the USDC contract address and ABI (Application Binary Interface). The ABI specifies the functions available in the contract. (The USDC Token Contract Address referenced in the code is on Ethereum Sepolia)\n\n```javascript\nconst USDC_CONTRACT_ADDRESS = '0x75faf114eafb1BDbe2F0316DF893fd58CE46AA4d';\nconst USDC_ABI = [\n  {\n    constant: false,\n    inputs: [\n      { name: '_to', type: 'address' },\n      { name: '_value', type: 'uint256' },\n    ],\n    name: 'transfer',\n    outputs: [{ name: '', type: 'bool' }],\n    type: 'function',\n  },\n];\n```\n\n## Connect wallet\n\nCreate a function to connect the user's wallet and retrieve their account address. ```javascript\nconst connect = async () => {\n  const [address] = await walletClient.requestAddresses();\n  setAccount(address);\n};\n```\n\n## Send transaction\n\nCreate a function to send the USDC transfer transaction."
    },
    {
      "id": "usdc_quickstart_guide.mdx_chunk_3",
      "content": "This function encodes the transfer function data and sends the transaction using the wallet client. ```javascript\nconst data = encodeFunctionData({\n  abi: USDC_ABI,\n  functionName: 'transfer',\n  args: [to, valueInWei],\n});\n\nconst hash = await walletClient.sendTransaction({\n  account,\n  to: USDC_CONTRACT_ADDRESS,\n  data,\n});\n```\n\n## Wait for transaction receipt\n\nUse the public client to wait for the transaction receipt, which confirms that the transaction has been mined. ```javascript\nuseEffect(() => {\n  (async () => {\n    if (hash) {\n      const receipt = await publicClient.waitForTransactionReceipt({ hash });\n      setReceipt(receipt);\n    }\n  })();\n}, [hash]);\n```\n\n## Final step: build your USDC transfer sample app\n\nNow that you understand the core components for programmatically performing your first USDC transaction, create the following **index.tsx** and **index.html** files to build a sample app. This app will enable you to send USDC from one wallet to another. Ensure that your wallet is funded with both the native gas token and USDC."
    },
    {
      "id": "usdc_quickstart_guide.mdx_chunk_4",
      "content": "```javascript title=\"index.tsx\"\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport {\n  http,\n  type Address,\n  type Hash,\n  type TransactionReceipt,\n  createPublicClient,\n  createWalletClient,\n  custom,\n  stringify,\n  encodeFunctionData,\n} from 'viem';\nimport { arbitrumSepolia } from 'viem/chains';\nimport 'viem/window';\n\nconst publicClient = createPublicClient({\n  chain: arbitrumSepolia,\n  transport: http()\n});\n\nconst walletClient = createWalletClient({\n  chain: arbitrumSepolia,\n  transport: custom(window.ethereum!)\n});\n\nconst USDC_CONTRACT_ADDRESS = '0x75faf114eafb1BDbe2F0316DF893fd58CE46AA4d';\nconst USDC_ABI = [\n  {\n    constant: false,\n    inputs: [\n      { name: '_to', type: 'address' },\n      { name: '_value', type: 'uint256' },\n    ],\n    name: 'transfer',\n    outputs: [{ name: '', type: 'bool' }],\n    type: 'function',\n  },\n];\n\nfunction Example() {\n  const [account, setAccount] = useState<Address>();\n  const [hash, setHash] = useState<Hash>();\n  const [receipt, setReceipt] = useState<TransactionReceipt>();\n\n  const addressInput = React.createRef<HTMLInputElement>();\n  const valueInput = React.createRef<HTMLInputElement>();\n\n  const connect = async () => {\n    const [address] = await walletClient.requestAddresses();\n    setAccount(address);\n  };\n\n  const sendTransaction = async () => {\n    if (!account) return;\n    const to = addressInput.current!.value as Address;\n    const value = valueInput.current!.value as `${number}`;\n    const valueInWei = BigInt(value) * BigInt(10 ** 6); // Assuming USDC has 6 decimals\n\n    const data = encodeFunctionData({\n      abi: USDC_ABI,\n      functionName: 'transfer',\n      args: [to, valueInWei],\n    });\n\n    const hash = await walletClient.sendTransaction({\n      account,\n      to: USDC_CONTRACT_ADDRESS,\n      data,\n    });\n    setHash(hash);\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (hash) {\n        const receipt = await publicClient.waitForTransactionReceipt({ hash });\n        setReceipt(receipt);\n      }\n    })();\n  }, [hash]);\n\n  if (account) {\n    return (\n      <>\n        <div>Connected: {account}</div>\n        <input ref={addressInput} placeholder=\"address\" />\n        <input ref={valueInput} placeholder=\"value (USDC)\" />\n        <button onClick={sendTransaction}>Send</button>\n        {receipt && (\n          <div>\n            Receipt: <pre><code>{stringify(receipt, null, 2)}</code></pre>\n          </div>\n        )}\n      </>\n    );\n  }\n  return <button onClick={connect}>Connect Wallet</button>;\n}\n\nReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n<Example />\n);\n```\n\n```html title=\"index.html\"\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>USDC Transfer Sample App</title>\n  </head>\n  <body>\n    <h1>USDC Transfer Sample App</h1>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/index.tsx\"></script>\n  </body>\n</html>\n```\n\nBy combining these **index.tsx** and **index.html** files, you will have a complete setup that allows you to perform a USDC transfer from your wallet."
    },
    {
      "id": "usdc_quickstart_guide.mdx_chunk_5",
      "content": "Simply connect your wallet, input the recipient's address and the amount of USDC to transfer, and click the “Send” button to execute the transaction. You will receive a transaction receipt once the transaction is confirmed on the blockchain."
    }
  ]
}